// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package ch.admin.eid.bbscryptosuite.bbscryptosuite;

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the details of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.IntegerType
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.Callback
import com.sun.jna.ptr.*
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.CharBuffer
import java.nio.charset.CodingErrorAction
import java.util.concurrent.ConcurrentHashMap
import android.os.Build
import ch.admin.eid.bbscryptosuite.bbs.FfiConverterTypePublicKey
import ch.admin.eid.bbscryptosuite.bbs.FfiConverterTypeSecretKey
import ch.admin.eid.bbscryptosuite.bbs.PublicKey
import ch.admin.eid.bbscryptosuite.bbs.SecretKey
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicLong
import ch.admin.eid.bbscryptosuite.bbs.RustBuffer as RustBufferPublicKey
import ch.admin.eid.bbscryptosuite.bbs.RustBuffer as RustBufferSecretKey

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    @JvmField var capacity: Int = 0
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue: RustBuffer(), Structure.ByValue
    class ByReference: RustBuffer(), Structure.ByReference

    companion object {
        internal fun alloc(size: Int = 0) = uniffiRustCall() { status ->
            UniffiLib.INSTANCE.ffi_bbscryptosuite_rustbuffer_alloc(size, status)
        }.also {
            if(it.data == null) {
               throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
           }
        }

        internal fun create(capacity: Int, len: Int, data: Pointer?): RustBuffer.ByValue {
            var buf = RustBuffer.ByValue()
            buf.capacity = capacity
            buf.len = len
            buf.data = data
            return buf
        }

        internal fun free(buf: RustBuffer.ByValue) = uniffiRustCall() { status ->
            UniffiLib.INSTANCE.ffi_bbscryptosuite_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setInt(0, value.capacity)
        pointer.setInt(4, value.len)
        pointer.setPointer(8, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = getPointer()
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getInt(0))
        value.writeField("len", pointer.getInt(4))
        value.writeField("data", pointer.getPointer(8))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}
// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): Int

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity.toLong()).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
           val item = read(byteBuf)
           if (byteBuf.hasRemaining()) {
               throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
           }
           return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
public interface FfiConverterRustBuffer<KotlinType>: FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.
// Error runtime.
@Structure.FieldOrder("code", "error_buf")
internal open class UniffiRustCallStatus : Structure() {
    @JvmField var code: Byte = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue: UniffiRustCallStatus(), Structure.ByValue

    fun isSuccess(): Boolean {
        return code == 0.toByte()
    }

    fun isError(): Boolean {
        return code == 1.toByte()
    }

    fun isPanic(): Boolean {
        return code == 2.toByte()
    }
}

class InternalException(message: String) : Exception(message)

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface UniffiRustCallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: Exception> uniffiRustCallWithError(errorHandler: UniffiRustCallStatusErrorHandler<E>, callback: (UniffiRustCallStatus) -> U): U {
    var status = UniffiRustCallStatus();
    val return_value = callback(status)
    uniffiCheckCallStatus(errorHandler, status)
    return return_value
}

// Check UniffiRustCallStatus and throw an error if the call wasn't successful
private fun<E: Exception> uniffiCheckCallStatus(errorHandler: UniffiRustCallStatusErrorHandler<E>, status: UniffiRustCallStatus) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

// UniffiRustCallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
object UniffiNullRustCallStatusErrorHandler: UniffiRustCallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> uniffiRustCall(callback: (UniffiRustCallStatus) -> U): U {
    return uniffiRustCallWithError(UniffiNullRustCallStatusErrorHandler, callback);
}

// IntegerType that matches Rust's `usize` / C's `size_t`
public class USize(value: Long = 0) : IntegerType(Native.SIZE_T_SIZE, value, true) {
    // This is needed to fill in the gaps of IntegerType's implementation of Number for Kotlin.
    override fun toByte() = toInt().toByte()
    // Needed until https://youtrack.jetbrains.com/issue/KT-47902 is fixed.
    @Deprecated("`toInt().toChar()` is deprecated")
    override fun toChar() = toInt().toChar()
    override fun toShort() = toInt().toShort()

    fun writeToBuffer(buf: ByteBuffer) {
        // Make sure we always write usize integers using native byte-order, since they may be
        // casted to pointer values
        buf.order(ByteOrder.nativeOrder())
        try {
            when (Native.SIZE_T_SIZE) {
                4 -> buf.putInt(toInt())
                8 -> buf.putLong(toLong())
                else -> throw RuntimeException("Invalid SIZE_T_SIZE: ${Native.SIZE_T_SIZE}")
            }
        } finally {
            buf.order(ByteOrder.BIG_ENDIAN)
        }
    }

    companion object {
        val size: Int
            get() = Native.SIZE_T_SIZE

        fun readFromBuffer(buf: ByteBuffer) : USize {
            // Make sure we always read usize integers using native byte-order, since they may be
            // casted from pointer values
            buf.order(ByteOrder.nativeOrder())
            try {
                return when (Native.SIZE_T_SIZE) {
                    4 -> USize(buf.getInt().toLong())
                    8 -> USize(buf.getLong())
                    else -> throw RuntimeException("Invalid SIZE_T_SIZE: ${Native.SIZE_T_SIZE}")
                }
            } finally {
                buf.order(ByteOrder.BIG_ENDIAN)
            }
        }
    }
}


// Map handles to objects
//
// This is used when the Rust code expects an opaque pointer to represent some foreign object.
// Normally we would pass a pointer to the object, but JNA doesn't support getting a pointer from an
// object reference , nor does it support leaking a reference to Rust.
//
// Instead, this class maps USize values to objects so that we can pass a pointer-sized type to
// Rust when it needs an opaque pointer.
//
// TODO: refactor callbacks to use this class
internal class UniFfiHandleMap<T: Any> {
    private val map = ConcurrentHashMap<USize, T>()
    // Use AtomicInteger for our counter, since we may be on a 32-bit system.  4 billion possible
    // values seems like enough. If somehow we generate 4 billion handles, then this will wrap
    // around back to zero and we can assume the first handle generated will have been dropped by
    // then.
    private val counter = java.util.concurrent.atomic.AtomicInteger(0)

    val size: Int
        get() = map.size

    fun insert(obj: T): USize {
        val handle = USize(counter.getAndAdd(1).toLong())
        map.put(handle, obj)
        return handle
    }

    fun get(handle: USize): T? {
        return map.get(handle)
    }

    fun remove(handle: USize): T? {
        return map.remove(handle)
    }
}

// FFI type for Rust future continuations
internal interface UniFffiRustFutureContinuationCallbackType : com.sun.jna.Callback {
    fun callback(continuationHandle: USize, pollResult: Byte);
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "bbscryptosuite"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface UniffiLib : Library {
    companion object {
        internal val INSTANCE: UniffiLib by lazy {
            loadIndirect<UniffiLib>(componentName = "cryptosuite")
            .also { lib: UniffiLib ->
                uniffiCheckContractApiVersion(lib)
                uniffiCheckApiChecksums(lib)
                }
        }
        
        // The Cleaner for the whole library
        internal val CLEANER: UniffiCleaner by lazy {
            UniffiCleaner.create()
        }
    }

    fun uniffi_bbscryptosuite_fn_clone_bbscryptosuite(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_bbscryptosuite_fn_free_bbscryptosuite(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_bbscryptosuite_fn_constructor_bbscryptosuite_from_secret_key(`secretKey`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_bbscryptosuite_fn_constructor_bbscryptosuite_new(uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_bbscryptosuite_fn_method_bbscryptosuite_add_derived_proof(`ptr`: Pointer,`initProof`: Pointer,`additionalChallenge`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_bbscryptosuite_fn_method_bbscryptosuite_add_proof(`ptr`: Pointer,`unsecuredDataDocument`: RustBuffer.ByValue,`proofOptions`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_bbscryptosuite_fn_method_bbscryptosuite_init_derived_proof(`ptr`: Pointer,`securedDataDocument`: RustBuffer.ByValue,`baseProof`: RustBuffer.ByValue,`selectivePointers`: RustBuffer.ByValue,`presentationHeader`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_bbscryptosuite_fn_method_bbscryptosuite_verify_proof(`ptr`: Pointer,`securedDocument`: RustBuffer.ByValue,`presentationHeader`: RustBuffer.ByValue,`publicKey`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_bbscryptosuite_fn_clone_bbsderivedproofinit(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_bbscryptosuite_fn_free_bbsderivedproofinit(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_bbscryptosuite_fn_clone_cryptosuiteoptions(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_bbscryptosuite_fn_free_cryptosuiteoptions(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_bbscryptosuite_fn_constructor_cryptosuiteoptions_new(`mandatoryPointers`: RustBuffer.ByValue,`cryptoSuite`: RustBuffer.ByValue,`verificationMethod`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_bbscryptosuite_fn_func_convert_json_path_to_json_pointer(`jsonPath`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_bbscryptosuite_fn_func_convert_json_pointer_to_json_path(`jsonPointer`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_bbscryptosuite_fn_func_validate_vc_with_base_proof(`securedDataDocument`: RustBuffer.ByValue,`publicKey`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun ffi_bbscryptosuite_rustbuffer_alloc(`size`: Int,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_bbscryptosuite_rustbuffer_from_bytes(`bytes`: ForeignBytes.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_bbscryptosuite_rustbuffer_free(`buf`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun ffi_bbscryptosuite_rustbuffer_reserve(`buf`: RustBuffer.ByValue,`additional`: Int,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_bbscryptosuite_rust_future_poll_u8(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_cancel_u8(`handle`: Pointer,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_free_u8(`handle`: Pointer,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_complete_u8(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun ffi_bbscryptosuite_rust_future_poll_i8(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_cancel_i8(`handle`: Pointer,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_free_i8(`handle`: Pointer,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_complete_i8(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun ffi_bbscryptosuite_rust_future_poll_u16(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_cancel_u16(`handle`: Pointer,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_free_u16(`handle`: Pointer,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_complete_u16(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Short
    fun ffi_bbscryptosuite_rust_future_poll_i16(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_cancel_i16(`handle`: Pointer,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_free_i16(`handle`: Pointer,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_complete_i16(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Short
    fun ffi_bbscryptosuite_rust_future_poll_u32(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_cancel_u32(`handle`: Pointer,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_free_u32(`handle`: Pointer,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_complete_u32(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Int
    fun ffi_bbscryptosuite_rust_future_poll_i32(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_cancel_i32(`handle`: Pointer,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_free_i32(`handle`: Pointer,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_complete_i32(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Int
    fun ffi_bbscryptosuite_rust_future_poll_u64(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_cancel_u64(`handle`: Pointer,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_free_u64(`handle`: Pointer,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_complete_u64(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Long
    fun ffi_bbscryptosuite_rust_future_poll_i64(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_cancel_i64(`handle`: Pointer,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_free_i64(`handle`: Pointer,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_complete_i64(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Long
    fun ffi_bbscryptosuite_rust_future_poll_f32(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_cancel_f32(`handle`: Pointer,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_free_f32(`handle`: Pointer,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_complete_f32(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Float
    fun ffi_bbscryptosuite_rust_future_poll_f64(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_cancel_f64(`handle`: Pointer,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_free_f64(`handle`: Pointer,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_complete_f64(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Double
    fun ffi_bbscryptosuite_rust_future_poll_pointer(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_cancel_pointer(`handle`: Pointer,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_free_pointer(`handle`: Pointer,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_complete_pointer(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun ffi_bbscryptosuite_rust_future_poll_rust_buffer(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_cancel_rust_buffer(`handle`: Pointer,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_free_rust_buffer(`handle`: Pointer,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_complete_rust_buffer(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_bbscryptosuite_rust_future_poll_void(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_cancel_void(`handle`: Pointer,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_free_void(`handle`: Pointer,
    ): Unit
    fun ffi_bbscryptosuite_rust_future_complete_void(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_bbscryptosuite_checksum_func_convert_json_path_to_json_pointer(
    ): Short
    fun uniffi_bbscryptosuite_checksum_func_convert_json_pointer_to_json_path(
    ): Short
    fun uniffi_bbscryptosuite_checksum_func_validate_vc_with_base_proof(
    ): Short
    fun uniffi_bbscryptosuite_checksum_method_bbscryptosuite_add_derived_proof(
    ): Short
    fun uniffi_bbscryptosuite_checksum_method_bbscryptosuite_add_proof(
    ): Short
    fun uniffi_bbscryptosuite_checksum_method_bbscryptosuite_init_derived_proof(
    ): Short
    fun uniffi_bbscryptosuite_checksum_method_bbscryptosuite_verify_proof(
    ): Short
    fun uniffi_bbscryptosuite_checksum_constructor_bbscryptosuite_from_secret_key(
    ): Short
    fun uniffi_bbscryptosuite_checksum_constructor_bbscryptosuite_new(
    ): Short
    fun uniffi_bbscryptosuite_checksum_constructor_cryptosuiteoptions_new(
    ): Short
    fun ffi_bbscryptosuite_uniffi_contract_version(
    ): Int
    
}

private fun uniffiCheckContractApiVersion(lib: UniffiLib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 25
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_bbscryptosuite_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}

@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: UniffiLib) {
    if (lib.uniffi_bbscryptosuite_checksum_func_convert_json_path_to_json_pointer() != 1142.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bbscryptosuite_checksum_func_convert_json_pointer_to_json_path() != 59224.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bbscryptosuite_checksum_func_validate_vc_with_base_proof() != 21912.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bbscryptosuite_checksum_method_bbscryptosuite_add_derived_proof() != 4491.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bbscryptosuite_checksum_method_bbscryptosuite_add_proof() != 2837.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bbscryptosuite_checksum_method_bbscryptosuite_init_derived_proof() != 8833.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bbscryptosuite_checksum_method_bbscryptosuite_verify_proof() != 63407.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bbscryptosuite_checksum_constructor_bbscryptosuite_from_secret_key() != 4588.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bbscryptosuite_checksum_constructor_bbscryptosuite_new() != 54177.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bbscryptosuite_checksum_constructor_cryptosuiteoptions_new() != 64192.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// Async support

// Public interface members begin here.


// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            args.filterIsInstance<Disposable>()
                .forEach(Disposable::destroy)
        }
    }
}

inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

public object FfiConverterBoolean: FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

public object FfiConverterString: FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len)
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    fun toUtf8(value: String): ByteBuffer {
        // Make sure we don't have invalid UTF-16, check for lone surrogates.
        return Charsets.UTF_8.newEncoder().run {
            onMalformedInput(CodingErrorAction.REPORT)
            encode(CharBuffer.wrap(value))
        }
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteBuf = toUtf8(value)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteBuf.limit())
        rbuf.asByteBuffer()!!.put(byteBuf)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per UTF-16 code unit which will always be
    // enough.
    override fun allocationSize(value: String): Int {
        val sizeForLength = 4
        val sizeForString = value.length * 3
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteBuf = toUtf8(value)
        buf.putInt(byteBuf.limit())
        buf.put(byteBuf)
    }
}

public object FfiConverterByteArray: FfiConverterRustBuffer<ByteArray> {
    override fun read(buf: ByteBuffer): ByteArray {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr
    }
    override fun allocationSize(value: ByteArray): Int {
        return 4 + value.size
    }
    override fun write(value: ByteArray, buf: ByteBuffer) {
        buf.putInt(value.size)
        buf.put(value)
    }
}



// The cleaner interface for Object finalization code to run.
// This is the entry point to any implementation that we're using.
//
// The cleaner registers objects and returns cleanables, so now we are
// defining a `UniffiCleaner` with a `UniffiClenaer.Cleanable` to abstract the
// different implmentations available at compile time.
interface UniffiCleaner {
    interface Cleanable {
        fun clean()
    }

    fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable

    companion object
}

// The fallback Jna cleaner, which is available for both Android, and the JVM.
private class UniffiJnaCleaner : UniffiCleaner {
    private val cleaner = com.sun.jna.internal.Cleaner.getCleaner()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        UniffiJnaCleanable(cleaner.register(value, cleanUpTask))
}

private class UniffiJnaCleanable(
    private val cleanable: com.sun.jna.internal.Cleaner.Cleanable,
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}

// We decide at uniffi binding generation time whether we were
// using Android or not.
// There are further runtime checks to chose the correct implementation
// of the cleaner.


private fun UniffiCleaner.Companion.create(): UniffiCleaner =
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
        AndroidSystemCleaner()
    } else {
        UniffiJnaCleaner()
    }

// The SystemCleaner, available from API Level 33.
private class AndroidSystemCleaner : UniffiCleaner {
    val cleaner = android.system.SystemCleaner.cleaner()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        AndroidSystemCleanable(cleaner.register(value, cleanUpTask))
}

private class AndroidSystemCleanable(
    private val cleanable: java.lang.ref.Cleaner.Cleanable,
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}

// The base class for all UniFFI Object types.
//
// This class provides core operations for working with the Rust `Arc<T>` pointer to
// the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// the Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each `FFIObject` instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an `FFIObject` is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an `FFIObject` instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each `FFIObject` an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//
abstract class FFIObject: Disposable, AutoCloseable {

    constructor(pointer: Pointer) {
        this.pointer = pointer
    }

    /**
     * This constructor can be used to instantiate a fake object.
     *
     * **WARNING: Any object instantiated with this constructor cannot be passed to an actual Rust-backed object.**
     * Since there isn't a backing [Pointer] the FFI lower functions will crash.
     * @param noPointer Placeholder value so we can have a constructor separate from the default empty one that may be
     *   implemented for classes extending [FFIObject].
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
    }

    protected val pointer: Pointer?
    protected abstract val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    open fun uniffiClonePointer(): Pointer {
        // Overridden by generated subclasses, the default method exists to allow users to manually
        // implement the interface
        throw RuntimeException("uniffiClonePointer not implemented")
    }

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }
}

/** Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly. */
object NoPointer


public interface BbsCryptoSuiteInterface {
    
    /**
     * Generates a vc with an derived proof value in as "proofValue"
     * # Arguments
     * * `proof_init` - The initialized derived proof object created by the "init_derived_proof" method
     * * `additional_challenge` - Challenges which are provided by the prover/holder
     */
    fun `addDerivedProof`(`initProof`: BbsDerivedProofInit, `additionalChallenge`: ByteArray?): String
    
    /**
     * Adds base proof to the plain verifiable credential
     * # Arguments
     * * `unsecured_data_document` - The unsecured (without "proof" object) verifiable credential
     * * `proof_options` - General configuration options for the integrity proof generation
     * # Returns
     * Verifiable credential with "proof" object
     */
    fun `addProof`(`unsecuredDataDocument`: String, `proofOptions`: CryptoSuiteOptions): String
    
    /**
     * Initialize derived proof to present the credential with disclosed attributes
     * > *Why two methods?* The init_derived_proof method is used to initialize the derived proof / presentation with the base data with "add_derived_proof" the actual presentation vc is created.
     * # Arguments
     * * `secured_data_document` - The secured verifiable credential
     * * `base_proof` - The base proof of the verifiable credential which was created by the issuer during vc issuance
     * * `selective_pointers` - The selective JsonPointers which are used to disclose certain attributes from the vc
     * * `presentation_header` - The presentation header represents a nonce provided by the verifier
     */
    fun `initDerivedProof`(`securedDataDocument`: String, `baseProof`: String, `selectivePointers`: List<String>, `presentationHeader`: String): BbsDerivedProofInit
    
    /**
     * Verify a data integrity proof given an secured data document
     * # Arguments
     * - `secured_document` - The secured (with derived proof value) verifiable credential
     * - `presentation_header` - The presentation header / nonce which was provided to the prover/holder during derived proof creation
     * - `public_key` - The public key of the issuer which is referenced in the verificationMethod
     * # Returns
     * Verification result with boolean value if the presentation is valid or not
     */
    fun `verifyProof`(`securedDocument`: String, `presentationHeader`: String, `publicKey`: PublicKey): CryptoSuiteVerificationResult
    
    companion object
}

open class BbsCryptoSuite : FFIObject, BbsCryptoSuiteInterface {

    constructor(pointer: Pointer): super(pointer)

    /**
     * This constructor can be used to instantiate a fake object.
     *
     * **WARNING: Any object instantiated with this constructor cannot be passed to an actual Rust-backed object.**
     * Since there isn't a backing [Pointer] the FFI lower functions will crash.
     * @param noPointer Placeholder value so we can have a constructor separate from the default empty one that may be
     *   implemented for classes extending [FFIObject].
     */
    constructor(noPointer: NoPointer): super(noPointer)
    /**
     * Instantiate a cryptosuite without private/secret key for to create a presentation or verify presentation. If you want to create a base base proof call the static method "from_secret_key"
     */
    constructor() :
        this(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_bbscryptosuite_fn_constructor_bbscryptosuite_new(_status)
})

    override val cleanable: UniffiCleaner.Cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_bbscryptosuite_fn_free_bbscryptosuite(ptr, status)
                }
            }
        }
    }

    override fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_bbscryptosuite_fn_clone_bbscryptosuite(pointer!!, status)
        }
    }

    
    /**
     * Generates a vc with an derived proof value in as "proofValue"
     * # Arguments
     * * `proof_init` - The initialized derived proof object created by the "init_derived_proof" method
     * * `additional_challenge` - Challenges which are provided by the prover/holder
     */
    @Throws(BbsCryptoSuiteException::class)override fun `addDerivedProof`(`initProof`: BbsDerivedProofInit, `additionalChallenge`: ByteArray?): String =
        callWithPointer {
    uniffiRustCallWithError(BbsCryptoSuiteException) { _status ->
    UniffiLib.INSTANCE.uniffi_bbscryptosuite_fn_method_bbscryptosuite_add_derived_proof(it,
        FfiConverterTypeBBSDerivedProofInit.lower(`initProof`),FfiConverterOptionalByteArray.lower(`additionalChallenge`),
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    
    /**
     * Adds base proof to the plain verifiable credential
     * # Arguments
     * * `unsecured_data_document` - The unsecured (without "proof" object) verifiable credential
     * * `proof_options` - General configuration options for the integrity proof generation
     * # Returns
     * Verifiable credential with "proof" object
     */
    @Throws(BbsCryptoSuiteException::class)override fun `addProof`(`unsecuredDataDocument`: String, `proofOptions`: CryptoSuiteOptions): String =
        callWithPointer {
    uniffiRustCallWithError(BbsCryptoSuiteException) { _status ->
    UniffiLib.INSTANCE.uniffi_bbscryptosuite_fn_method_bbscryptosuite_add_proof(it,
        FfiConverterString.lower(`unsecuredDataDocument`),FfiConverterTypeCryptoSuiteOptions.lower(`proofOptions`),
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    
    /**
     * Initialize derived proof to present the credential with disclosed attributes
     * > *Why two methods?* The init_derived_proof method is used to initialize the derived proof / presentation with the base data with "add_derived_proof" the actual presentation vc is created.
     * # Arguments
     * * `secured_data_document` - The secured verifiable credential
     * * `base_proof` - The base proof of the verifiable credential which was created by the issuer during vc issuance
     * * `selective_pointers` - The selective JsonPointers which are used to disclose certain attributes from the vc
     * * `presentation_header` - The presentation header represents a nonce provided by the verifier
     */
    @Throws(BbsCryptoSuiteException::class)override fun `initDerivedProof`(`securedDataDocument`: String, `baseProof`: String, `selectivePointers`: List<String>, `presentationHeader`: String): BbsDerivedProofInit =
        callWithPointer {
    uniffiRustCallWithError(BbsCryptoSuiteException) { _status ->
    UniffiLib.INSTANCE.uniffi_bbscryptosuite_fn_method_bbscryptosuite_init_derived_proof(it,
        FfiConverterString.lower(`securedDataDocument`),FfiConverterString.lower(`baseProof`),FfiConverterSequenceString.lower(`selectivePointers`),FfiConverterString.lower(`presentationHeader`),
        _status)
}
        }.let {
            FfiConverterTypeBBSDerivedProofInit.lift(it)
        }
    
    
    /**
     * Verify a data integrity proof given an secured data document
     * # Arguments
     * - `secured_document` - The secured (with derived proof value) verifiable credential
     * - `presentation_header` - The presentation header / nonce which was provided to the prover/holder during derived proof creation
     * - `public_key` - The public key of the issuer which is referenced in the verificationMethod
     * # Returns
     * Verification result with boolean value if the presentation is valid or not
     */
    @Throws(BbsCryptoSuiteException::class)override fun `verifyProof`(`securedDocument`: String, `presentationHeader`: String, `publicKey`: PublicKey): CryptoSuiteVerificationResult =
        callWithPointer {
    uniffiRustCallWithError(BbsCryptoSuiteException) { _status ->
    UniffiLib.INSTANCE.uniffi_bbscryptosuite_fn_method_bbscryptosuite_verify_proof(it,
        FfiConverterString.lower(`securedDocument`),FfiConverterString.lower(`presentationHeader`),FfiConverterTypePublicKey.lower(`publicKey`),
        _status)
}
        }.let {
            FfiConverterTypeCryptoSuiteVerificationResult.lift(it)
        }
    
    

    companion object {
        
    /**
     * Instantiate a cryptosuite
     * # Arguments
     * * `secret_key` - Secret key for the cryptosuite. This secret key is only required for the add_derived_proof function. In all other cases you can use the empty constructor
     * which creates the base proof
     */
        fun `fromSecretKey`(`secretKey`: SecretKey): BbsCryptoSuite =
            BbsCryptoSuite(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_bbscryptosuite_fn_constructor_bbscryptosuite_from_secret_key(FfiConverterTypeSecretKey.lower(`secretKey`),_status)
})
        
    }
    
}

public object FfiConverterTypeBBSCryptoSuite: FfiConverter<BbsCryptoSuite, Pointer> {

    override fun lower(value: BbsCryptoSuite): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): BbsCryptoSuite {
        return BbsCryptoSuite(value)
    }

    override fun read(buf: ByteBuffer): BbsCryptoSuite {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: BbsCryptoSuite) = 8

    override fun write(value: BbsCryptoSuite, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}





public interface BbsDerivedProofInitInterface {
    
    companion object
}

open class BbsDerivedProofInit : FFIObject, BbsDerivedProofInitInterface {

    constructor(pointer: Pointer): super(pointer)

    /**
     * This constructor can be used to instantiate a fake object.
     *
     * **WARNING: Any object instantiated with this constructor cannot be passed to an actual Rust-backed object.**
     * Since there isn't a backing [Pointer] the FFI lower functions will crash.
     * @param noPointer Placeholder value so we can have a constructor separate from the default empty one that may be
     *   implemented for classes extending [FFIObject].
     */
    constructor(noPointer: NoPointer): super(noPointer)

    override val cleanable: UniffiCleaner.Cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_bbscryptosuite_fn_free_bbsderivedproofinit(ptr, status)
                }
            }
        }
    }

    override fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_bbscryptosuite_fn_clone_bbsderivedproofinit(pointer!!, status)
        }
    }

    

    
    companion object
    
}

public object FfiConverterTypeBBSDerivedProofInit: FfiConverter<BbsDerivedProofInit, Pointer> {

    override fun lower(value: BbsDerivedProofInit): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): BbsDerivedProofInit {
        return BbsDerivedProofInit(value)
    }

    override fun read(buf: ByteBuffer): BbsDerivedProofInit {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: BbsDerivedProofInit) = 8

    override fun write(value: BbsDerivedProofInit, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}





/**
 * Options aka "ProofConfig" for the specific crypto suite implementations described under
 * https://www.w3.org/TR/vc-di-bbs/#base-proof-configuration-bbs-2023
 * https://www.w3.org/TR/vc-data-integrity/#add-proof
 */
public interface CryptoSuiteOptionsInterface {
    
    companion object
}

/**
 * Options aka "ProofConfig" for the specific crypto suite implementations described under
 * https://www.w3.org/TR/vc-di-bbs/#base-proof-configuration-bbs-2023
 * https://www.w3.org/TR/vc-data-integrity/#add-proof
 */
open class CryptoSuiteOptions : FFIObject, CryptoSuiteOptionsInterface {

    constructor(pointer: Pointer): super(pointer)

    /**
     * This constructor can be used to instantiate a fake object.
     *
     * **WARNING: Any object instantiated with this constructor cannot be passed to an actual Rust-backed object.**
     * Since there isn't a backing [Pointer] the FFI lower functions will crash.
     * @param noPointer Placeholder value so we can have a constructor separate from the default empty one that may be
     *   implemented for classes extending [FFIObject].
     */
    constructor(noPointer: NoPointer): super(noPointer)
    /**
     * Creates cryptosuite
     * # Arguments
     * * `mandatory_pointers` - List of mandatory pointers JsonPointers
     * * `crypto_suite` - Cryptosuite type to be used like bb2023
     * * `verification_method` - Verification method/identifier {did}#keyId which exists in the DID document
     */
    constructor(`mandatoryPointers`: List<String>, `cryptoSuite`: CryptoSuiteType, `verificationMethod`: String) :
        this(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_bbscryptosuite_fn_constructor_cryptosuiteoptions_new(FfiConverterSequenceString.lower(`mandatoryPointers`),FfiConverterTypeCryptoSuiteType.lower(`cryptoSuite`),FfiConverterString.lower(`verificationMethod`),_status)
})

    override val cleanable: UniffiCleaner.Cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_bbscryptosuite_fn_free_cryptosuiteoptions(ptr, status)
                }
            }
        }
    }

    override fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_bbscryptosuite_fn_clone_cryptosuiteoptions(pointer!!, status)
        }
    }

    

    
    companion object
    
}

public object FfiConverterTypeCryptoSuiteOptions: FfiConverter<CryptoSuiteOptions, Pointer> {

    override fun lower(value: CryptoSuiteOptions): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): CryptoSuiteOptions {
        return CryptoSuiteOptions(value)
    }

    override fun read(buf: ByteBuffer): CryptoSuiteOptions {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: CryptoSuiteOptions) = 8

    override fun write(value: CryptoSuiteOptions, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}



data class CryptoSuiteVerificationResult (
    var `verified`: Boolean, 
    var `verifiedDocument`: String, 
    var `errors`: List<String>
) {
    
    companion object
}

public object FfiConverterTypeCryptoSuiteVerificationResult: FfiConverterRustBuffer<CryptoSuiteVerificationResult> {
    override fun read(buf: ByteBuffer): CryptoSuiteVerificationResult {
        return CryptoSuiteVerificationResult(
            FfiConverterBoolean.read(buf),
            FfiConverterString.read(buf),
            FfiConverterSequenceString.read(buf),
        )
    }

    override fun allocationSize(value: CryptoSuiteVerificationResult) = (
            FfiConverterBoolean.allocationSize(value.`verified`) +
            FfiConverterString.allocationSize(value.`verifiedDocument`) +
            FfiConverterSequenceString.allocationSize(value.`errors`)
    )

    override fun write(value: CryptoSuiteVerificationResult, buf: ByteBuffer) {
            FfiConverterBoolean.write(value.`verified`, buf)
            FfiConverterString.write(value.`verifiedDocument`, buf)
            FfiConverterSequenceString.write(value.`errors`, buf)
    }
}





sealed class BbsCryptoSuiteException(message: String): Exception(message) {
        
        class GenericException(message: String) : BbsCryptoSuiteException(message)
        
        class InvalidProofConfigurationException(message: String) : BbsCryptoSuiteException(message)
        
        class ShuffledLabelGenerationException(message: String) : BbsCryptoSuiteException(message)
        
        class CanonicalizationException(message: String) : BbsCryptoSuiteException(message)
        
        class InvalidDerivedProofException(message: String) : BbsCryptoSuiteException(message)
        
        class InvalidRdfGraphException(message: String) : BbsCryptoSuiteException(message)
        
        class DerivedProofInitializationException(message: String) : BbsCryptoSuiteException(message)
        

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<BbsCryptoSuiteException> {
        override fun lift(error_buf: RustBuffer.ByValue): BbsCryptoSuiteException = FfiConverterTypeBbsCryptoSuiteError.lift(error_buf)
    }
}

public object FfiConverterTypeBbsCryptoSuiteError : FfiConverterRustBuffer<BbsCryptoSuiteException> {
    override fun read(buf: ByteBuffer): BbsCryptoSuiteException {
        
            return when(buf.getInt()) {
            1 -> BbsCryptoSuiteException.GenericException(FfiConverterString.read(buf))
            2 -> BbsCryptoSuiteException.InvalidProofConfigurationException(FfiConverterString.read(buf))
            3 -> BbsCryptoSuiteException.ShuffledLabelGenerationException(FfiConverterString.read(buf))
            4 -> BbsCryptoSuiteException.CanonicalizationException(FfiConverterString.read(buf))
            5 -> BbsCryptoSuiteException.InvalidDerivedProofException(FfiConverterString.read(buf))
            6 -> BbsCryptoSuiteException.InvalidRdfGraphException(FfiConverterString.read(buf))
            7 -> BbsCryptoSuiteException.DerivedProofInitializationException(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
        
    }

    override fun allocationSize(value: BbsCryptoSuiteException): Int {
        return 4
    }

    override fun write(value: BbsCryptoSuiteException, buf: ByteBuffer) {
        when(value) {
            is BbsCryptoSuiteException.GenericException -> {
                buf.putInt(1)
                Unit
            }
            is BbsCryptoSuiteException.InvalidProofConfigurationException -> {
                buf.putInt(2)
                Unit
            }
            is BbsCryptoSuiteException.ShuffledLabelGenerationException -> {
                buf.putInt(3)
                Unit
            }
            is BbsCryptoSuiteException.CanonicalizationException -> {
                buf.putInt(4)
                Unit
            }
            is BbsCryptoSuiteException.InvalidDerivedProofException -> {
                buf.putInt(5)
                Unit
            }
            is BbsCryptoSuiteException.InvalidRdfGraphException -> {
                buf.putInt(6)
                Unit
            }
            is BbsCryptoSuiteException.DerivedProofInitializationException -> {
                buf.putInt(7)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}



enum class CryptoSuiteType {
    
    BBS2023,
    ECDSA_RDFC2019,
    ECDSA_JCS2019,
    ECDSA_SD2019,
    EDDSA_RDFC2022;
    companion object
}

public object FfiConverterTypeCryptoSuiteType: FfiConverterRustBuffer<CryptoSuiteType> {
    override fun read(buf: ByteBuffer) = try {
        CryptoSuiteType.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: CryptoSuiteType) = 4

    override fun write(value: CryptoSuiteType, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}







sealed class JsonConversionException(message: String): Exception(message) {
        
        class InvalidJsonPath(message: String) : JsonConversionException(message)
        
        class InvalidJsonPointer(message: String) : JsonConversionException(message)
        

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<JsonConversionException> {
        override fun lift(error_buf: RustBuffer.ByValue): JsonConversionException = FfiConverterTypeJsonConversionError.lift(error_buf)
    }
}

public object FfiConverterTypeJsonConversionError : FfiConverterRustBuffer<JsonConversionException> {
    override fun read(buf: ByteBuffer): JsonConversionException {
        
            return when(buf.getInt()) {
            1 -> JsonConversionException.InvalidJsonPath(FfiConverterString.read(buf))
            2 -> JsonConversionException.InvalidJsonPointer(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
        
    }

    override fun allocationSize(value: JsonConversionException): Int {
        return 4
    }

    override fun write(value: JsonConversionException, buf: ByteBuffer) {
        when(value) {
            is JsonConversionException.InvalidJsonPath -> {
                buf.putInt(1)
                Unit
            }
            is JsonConversionException.InvalidJsonPointer -> {
                buf.putInt(2)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}





sealed class VcValidationException(message: String): Exception(message) {
        
        class MissingAttribute(message: String) : VcValidationException(message)
        
        class InvalidCryptoSuite(message: String) : VcValidationException(message)
        
        class InvalidBaseProofConfiguration(message: String) : VcValidationException(message)
        
        class EncodingException(message: String) : VcValidationException(message)
        
        class GenericException(message: String) : VcValidationException(message)
        

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<VcValidationException> {
        override fun lift(error_buf: RustBuffer.ByValue): VcValidationException = FfiConverterTypeVcValidationError.lift(error_buf)
    }
}

public object FfiConverterTypeVcValidationError : FfiConverterRustBuffer<VcValidationException> {
    override fun read(buf: ByteBuffer): VcValidationException {
        
            return when(buf.getInt()) {
            1 -> VcValidationException.MissingAttribute(FfiConverterString.read(buf))
            2 -> VcValidationException.InvalidCryptoSuite(FfiConverterString.read(buf))
            3 -> VcValidationException.InvalidBaseProofConfiguration(FfiConverterString.read(buf))
            4 -> VcValidationException.EncodingException(FfiConverterString.read(buf))
            5 -> VcValidationException.GenericException(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
        
    }

    override fun allocationSize(value: VcValidationException): Int {
        return 4
    }

    override fun write(value: VcValidationException, buf: ByteBuffer) {
        when(value) {
            is VcValidationException.MissingAttribute -> {
                buf.putInt(1)
                Unit
            }
            is VcValidationException.InvalidCryptoSuite -> {
                buf.putInt(2)
                Unit
            }
            is VcValidationException.InvalidBaseProofConfiguration -> {
                buf.putInt(3)
                Unit
            }
            is VcValidationException.EncodingException -> {
                buf.putInt(4)
                Unit
            }
            is VcValidationException.GenericException -> {
                buf.putInt(5)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}




public object FfiConverterOptionalByteArray: FfiConverterRustBuffer<ByteArray?> {
    override fun read(buf: ByteBuffer): ByteArray? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterByteArray.read(buf)
    }

    override fun allocationSize(value: ByteArray?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterByteArray.allocationSize(value)
        }
    }

    override fun write(value: ByteArray?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterByteArray.write(value, buf)
        }
    }
}




public object FfiConverterSequenceString: FfiConverterRustBuffer<List<String>> {
    override fun read(buf: ByteBuffer): List<String> {
        val len = buf.getInt()
        return List<String>(len) {
            FfiConverterString.read(buf)
        }
    }

    override fun allocationSize(value: List<String>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterString.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterString.write(it, buf)
        }
    }
}








        /**
         * Converts a json path to a json pointer. Only unambiguous json paths are allowed.
         * # Example
         * $.store.book[0].title becomes /store/book/0/title
         */
@Throws(JsonConversionException::class)

fun `convertJsonPathToJsonPointer`(`jsonPath`: String): String {
    return FfiConverterString.lift(
    uniffiRustCallWithError(JsonConversionException) { _status ->
    UniffiLib.INSTANCE.uniffi_bbscryptosuite_fn_func_convert_json_path_to_json_pointer(FfiConverterString.lower(`jsonPath`),_status)
})
}

        /**
         * Converts a json pointer to a json path
         * # Example
         * /store/book/0/title becomes $.store.book[0].title
         */
@Throws(JsonConversionException::class)

fun `convertJsonPointerToJsonPath`(`jsonPointer`: String): String {
    return FfiConverterString.lift(
    uniffiRustCallWithError(JsonConversionException) { _status ->
    UniffiLib.INSTANCE.uniffi_bbscryptosuite_fn_func_convert_json_pointer_to_json_path(FfiConverterString.lower(`jsonPointer`),_status)
})
}

        /**
         * Validates the integrity proof of vc with base proof
         */
@Throws(VcValidationException::class)

fun `validateVcWithBaseProof`(`securedDataDocument`: String, `publicKey`: PublicKey): Boolean {
    return FfiConverterBoolean.lift(
    uniffiRustCallWithError(VcValidationException) { _status ->
    UniffiLib.INSTANCE.uniffi_bbscryptosuite_fn_func_validate_vc_with_base_proof(FfiConverterString.lower(`securedDataDocument`),FfiConverterTypePublicKey.lower(`publicKey`),_status)
})
}


